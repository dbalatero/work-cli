#!/usr/bin/env bash

# →→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→
#
#     █     █░ ▒█████   ██▀███   ██ ▄█▀
#    ▓█░ █ ░█░▒██▒  ██▒▓██ ▒ ██▒ ██▄█▒
#    ▒█░ █ ░█ ▒██░  ██▒▓██ ░▄█ ▒▓███▄░
#    ░█░ █ ░█ ▒██   ██░▒██▀▀█▄  ▓██ █▄
#    ░░██▒██▓ ░ ████▓▒░░██▓ ▒██▒▒██▒ █▄
#    ░ ▓░▒ ▒  ░ ▒░▒░▒░ ░ ▒▓ ░▒▓░▒ ▒▒ ▓▒
#      ▒ ░ ░    ░ ▒ ▒░   ░▒ ░ ▒░░ ░▒ ▒░
#      ░   ░  ░ ░ ░ ▒    ░░   ░ ░ ░░ ░
#        ░        ░ ░     ░     ░  ░
#
#    Written by @dbalatero <https://github.com/dbalatero>
# →→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→

set -e

command_ran="$(basename "$0") $*"
script_args=("$@")

function indent() {
  local amount=${1:-    }

  sed 's/^/'"$amount"'/'
}

function dotsay() {
  local result
  result=$(_colorized "$@")
  echo "$result"
}

function abort_error() {
  local msg="$1"
  local help_function="$2"

  dotsay "@red[[Error: $msg]]"

  if [ "$help_function" != "" ]; then
    echo
    $help_function
  fi

  exit 1
}

function print_action() {
  dotsay "@b@blue[[+ $1]]"
}

BOLD=$(tput bold)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

function _colorized() {
  echo "$@" | sed -E \
    -e 's/((@(red|green|yellow|blue|magenta|cyan|white|reset|b|u))+)[[]{2}([^]]*)[]]{2}/\1\4@reset/g' \
    -e "s/@red/$(tput setaf 1)/g" \
    -e "s/@green/$(tput setaf 2)/g" \
    -e "s/@yellow/$(tput setaf 3)/g" \
    -e "s/@blue/$(tput setaf 4)/g" \
    -e "s/@magenta/$(tput setaf 5)/g" \
    -e "s/@cyan/$(tput setaf 6)/g" \
    -e "s/@white/$(tput setaf 7)/g" \
    -e "s/@reset/$(tput sgr0)/g" \
    -e "s/@b/$(tput bold)/g" \
    -e "s/@u/$(tput sgr 0 1)/g"
}

function print_done() {
  dotsay "@green[[✔]] Done"
}

function command_exists() {
  local name=$1

  command -v "$name" >/dev/null 2>&1
}

linear_api_key_file="$HOME/.config/work-cli/keys/linear-api-key"

function linear_api_key() {
  cat "$linear_api_key_file"
}

function require_linear_api_key() {
  if [[ ! -f "$linear_api_key_file" ]]; then
    local url="https://linear.app/settings/api"

    echo '
******************************
* Linear setup (first-time run)
******************************
'
    dotsay "To use any Linear options with @yellow[[work]], you need an API key."
    echo
    dotsay "@yellow[[Set up your Linear API key]] by:"
    echo
    echo -n "  "
    dotsay "  1. Opening the Linear settings page (@yellow[[$url]])"
    echo -n "  "
    dotsay "  2. Generating a @yellow[[Personal API Token]]"
    echo   "  3. Pasting it back here"
    echo
    echo   "Would you like me to open the settings page?"
    echo   "You will come back here to paste in your key afterwards."
    echo

    read -r -p "? (y/n) > " response
    echo

    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      local keys_dir
      keys_dir=$(dirname "$linear_api_key_file")

      print_action "Ensuring $keys_dir exists"
      mkdir -p "$keys_dir"
      chmod 700 "$keys_dir"

      print_action "Opening $url in Chrome"
      open -na "Google Chrome" --args --new-window "$url"

      echo
      read -r -p "Create an API token, paste it back here, and press enter > " api_token

      echo
      echo "$api_token" > "$linear_api_key_file"
      chmod 600 "$linear_api_key_file"

      echo "Finished one-time Linear setup"
      echo
      echo "******************************"
      echo
    else
      echo "non-yes answer, exiting"
      exit 1
    fi
  fi
}

function get_linear_issue() {
  local issue_id="$1"

  local raw_json
  raw_json=$(
    curl -s \
      -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization: $(linear_api_key)" \
      --data '{ "query": "{ issue(id: \"'"$issue_id"'\") { identifier description title url } }" }' \
      https://api.linear.app/graphql
  ) && RC=$? || RC=$?

  if test $RC -ne 0; then
    echo "Error from curl retrieving Linear issue"
    return 1
  fi

  if [ "$(echo "$raw_json" | jq 'has("errors")')" = "true" ]; then
    # Handle errors
    local message
    message=$(echo "$raw_json" | jq ".errors[0].extensions.userPresentableMessage")
    echo "Could not retrieve Linear issue. Linear said: $message"
    return 1
  else
    echo "$raw_json" | jq ".data.issue"
    return 0
  fi
}

function ensure_gh_is_logged_in() {
  if ! gh auth status >/dev/null 2>&1 ; then
    echo '
*****************************************
* Github API key setup (first-time run) *
*****************************************
'
    dotsay "You need to @yellow[[login to gh]] with a Github API token."
    echo
    dotsay "Type @yellow[[yes]] at the prompt to:"
    echo
    dotsay "1. @yellow[[Automatically open]] your Github tokens setting page"
    dotsay "2. Select @yellow[[No expiration]] for @yellow[[Expiration]]"
    dotsay "3. Press the @yellow[[Generate token]] button to create the token"
    dotsay "4. And then come back here to @yellow[[paste the API token]] in"
    echo
    read -r -p "I understand and want to continue (Y/n) > " should_continue
    echo

    if [[ ! "$should_continue" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      echo   "Non-yes answer, aborting setup!"
      dotsay "Re-run @yellow[[$command_ran]] later to pick up where you left off."
      exit 1
    fi

    print_action "Opening up your Github API token settings..."
    open -na "Google Chrome" --args --new-window "https://github.com/settings/tokens/new?description=work-cli+gh+command+line+token&scopes=repo,read:org"
    echo

    read -r -p "Paste in your Github API token > " api_token
    api_token=$(trim "$api_token")
    echo

    if [ "$api_token" = "" ]; then
      echo "Error: you entered a blank API key"
      dotsay "Re-run @yellow[[$command_ran]] later to pick up where you left off."
      exit 1
    fi

    print_action "Logging you into gh..."

    echo "$api_token" | gh auth login \
      --hostname github.com \
      --with-token

    if ! gh auth status >/dev/null 2>&1 ; then
      echo "Weird - you don't seem to be logged into Github after pasting the key."
      dotsay "Run @yellow[[gh auth status]] to get some debug info."
      exit 1
    else
      echo "Done with setup"
    fi
  fi
}

function ensure_branch_is_on_main() {
  local main_branch
  local current_branch

  main_branch=$(git_main_branch)
  current_branch=$(git_current_branch)

  if [ "$main_branch" != "$current_branch" ]; then
    abort_error "work begin does not currently support branching off a non-$main_branch branch (you are on '$current_branch'). You can \`git checkout $main_branch\` and try running \`$command_ran\` again."
  fi
}

function ensure_branch_does_not_exist_on_remote() {
  local branch="$1"
  git ls-remote --exit-code --heads origin "$branch" >/dev/null 2>&1 && RC=$? || RC=$?

  if test $RC -eq 0; then
    # exit code 0 == the branch exists
    abort_error "the \"$branch\" branch already exists on origin (Github). Try again with a different PR title, or delete the remote branch by running 'git push origin :$branch'."
  fi
}

function ensure_branch_does_not_exist_locally() {
  local branch="$1"
  local existed_in_local
  existed_in_local=$(git branch --list "$branch")

  if [[ -n "$existed_in_local" ]]; then
    abort_error "the \"$branch\" branch exists locally. Try again with a different PR title, or remove the branch by running 'git branch -D $branch'"
  fi
}

function require_gh() {
  if ! command_exists "gh"; then
    print_action "[prereq] Installing FZF (awesome CLI fuzzy finder)"
    brew install gh
  fi

  ensure_gh_is_logged_in
}

function require_jq() {
  if ! command_exists "jq"; then
    print_action "[prereq] Installing jq (JSON parsing)"
    brew install jq
  fi
}

function require_fzf() {
  if ! command_exists "fzf"; then
    print_action "[prereq] Installing gh (Github CLI tools)"
    brew install fzf
  fi
}

function git_current_branch() {
  git symbolic-ref --short HEAD
}

function git_main_branch() {
  local repo_root
  repo_root=$(git rev-parse --show-toplevel)

  if [[ -f "$repo_root/.git/refs/heads/main" ]]; then
    echo "main"
  elif [[ -f "$repo_root/.git/refs/heads/master" ]]; then
    echo "master"
  else
    echo "unknown"
    exit 1
  fi
}

function git_status_clean() {
  git diff --quiet
}

# https://medium.com/@bit2pixel/how-i-navigate-hundreds-of-tabs-on-chrome-with-jxa-and-alfred-9bbf971af02b
function focus_tab_or_open() {
  local url="$1"

  local focus_result
  focus_result=$(osascript -s o -l JavaScript << EOF 2>&1
      const chrome = Application('Google Chrome');
      let found = false;

      chrome.windows().forEach((window) => {
        window.tabs().forEach((tab, tabIdx) => {
          if (tab.url().startsWith("$url")) {
            // focus the tab
            window.visible = true;
            window.index = 1;
            window.activeTabIndex = tabIdx + 1;
            chrome.activate();

            found = true;
          }
        });
      });

      console.log(found ? "Focused" : "Not found");
EOF
  )

  if [ "$focus_result" != "Focused" ]; then
    # Open the URL instead
    open -a "Google Chrome" "$url"
  fi
}

function trim() {
  local var="$*"

  # remove leading whitespace characters
  var="${var#"${var%%[![:space:]]*}"}"
  # remove trailing whitespace characters
  var="${var%"${var##*[![:space:]]}"}"

  printf '%s' "$var"
}

function branch_name_from_title() {
  echo "$1" | \
    sed "s/[^[:alpha:] ]//g" | \
    tr '[:upper:]' '[:lower:]' | \
    sed -r 's/ +/-/g' |
    cut -c1-40 |
    sed 's/-$//g'
}

function edit_pr_in_editor() {
  local __resultvar="$1"

  if [ "$EDITOR" = "" ]; then
    abort_error "your EDITOR is not set"
  fi

  # Create the description file
  local description_dir
  description_dir=/tmp/work-cli/descriptions
  mkdir -p "$description_dir"

  local branch_name_basename
  local description_file
  branch_name_basename=$(git_current_branch | sed "s/\\//-/g")
  description_file=$description_dir/$branch_name_basename.md

  mkdir -p "$description_dir"

  # Remove ^M chars if they exist (they do :\).
  gh pr view --json body -q ".body" | sed -e 's///' > "$description_file"

  # Open Vim/whatever
  $EDITOR "$description_file"

  eval "$__resultvar"="'$description_file'"
}

function auto_update_work_cli_if_needed() {
  local should_update=0
  local last_updated="$HOME/.config/work-cli/last-updated"
  mkdir -p "$(dirname "$last_updated")"

  if [[ ! -f "$last_updated" ]]; then
    touch "$last_updated"
    chmod 600 "$last_updated"
  else
    local last_modified_seconds
    local current_seconds
    local elapsed_seconds

    last_modified_seconds=$(date -r "$last_updated" +%s)
    current_seconds=$(date +%s)
    elapsed_seconds=$((current_seconds - last_modified_seconds))

    # Only attempt an auto update every 48 hours
    local min_elapsed_seconds=172800

    if [ "$elapsed_seconds" -gt "$min_elapsed_seconds" ]; then
      should_update=1
    fi
  fi

  if [ "$should_update" != "1" ]; then
    return 0
  fi

  # Skip updates if we have a dirty work tree
  cd ~/.work-cli
  local work_current_branch
  work_current_branch=$(git_current_branch)

  if ! git_status_clean ; then
    cd - >/dev/null # restore dir
    return 0
  else
    cd - >/dev/null # restore dir
  fi

  # We only update while we're on the main branch.
  if [ "$work_current_branch" = "main" ]; then
    cd ~/.work-cli
    local update_result
    update_result=$(git pull origin main 2>&1) || (cd - >/dev/null)
    cd - >/dev/null # restore dir

    if ! echo "$update_result" | grep -q "up to date" ; then
      print_action "Auto-updating work-cli..."
      echo
      echo "$update_result" | indent
      echo
      echo "-----------------------"
      echo
    fi

    touch "$last_updated"
  fi

  return 0
}

####################################################################
# Commands
####################################################################

function help_work() {
  cat << EOF
Remove every day developer toil around Github, branches, and reviews.

${BOLD}USAGE${RESET}
  work <command> <subcommand> [flags]

${BOLD}CORE COMMANDS${RESET}
  begin:   Create a new pull request off origin/main
  pr:      Switch between and view your pull requests
  review:  Quickly request a review and edit your PR description in one shot

${BOLD}ONBOARDING COMMANDS${RESET}
  setup:   One-time setup to install required dependencies

${BOLD}FLAGS${RESET}
  -h    Show help for any command

${BOLD}EXAMPLES${RESET}
  $ work begin              # create a new PR
  $ work review cindy       # request a review from @cindy on Github
  $ work pr switch          # quick switch to another PR's branch
  $ work pr show            # quick open your PR in Chrome

${BOLD}LEARN MORE${RESET}
  Use 'work <command> <subcommand> -h' for more information about a command.
EOF
}

function help_pr() {
  cat << EOF
Work with your pull requests on Github

${BOLD}USAGE${RESET}
  work pr <command> [flags]

${BOLD}CORE COMMANDS${RESET}
  show:    Open your PR on Github in Chrome
  switch:  Quickly switch to other PR branches with a fast fuzzy finder

${BOLD}INHERITED FLAGS${RESET}
  -h    Show help for this command

${BOLD}LEARN MORE${RESET}
  Use 'work <command> <subcommand> -h' for more information about a command.
EOF
}

function help_begin() {
  cat << EOF
Prompts you for a new PR title, and:

  * Fetches the latest origin/main (or master)
  * Creates a new Git branch
  * Pushes & creates a new pull request

${BOLD}USAGE${RESET}
  work begin [flags]

${BOLD}FLAGS${RESET}
  --[no-]-auto-close
      Whether you want the Linear ticket to be auto-closed or not when your PR
      merges. The default is \`--closes\` as we think this is probably the
      default 90% of the time.

  -l, --linear ticket
      Linear ticket ID you'd like attached to this pull request (STA-123).
      Also accepts a full ticket URL
      (https://linear.app/project/issue/STA-123/some-foo-ticket)

${BOLD}INHERITED FLAGS${RESET}
  -h    Show help for this command

${BOLD}EXAMPLES${RESET}
  # Start a new pull request
  git checkout main
  work begin

  # Start a new pull request with a Linear ticket ID
  # This will create a branch with the ticket ID in the name
  git checkout main
  work begin -l STA-123

  # If it's easier to paste in the full Linear ticket URL, that works too
  git checkout main
  work begin -l https://linear.app/project/issue/STA-123/some-foo-ticket

  # Start a new branch off a Linear ticket, but don't mark it as "Closes"
  work begin -l STA-123 --no-auto-close

${BOLD}LEARN MORE${RESET}
  Use 'work <command> <subcommand> -h' for more information about a command.
EOF
}

function linear_description() {
  local linear_issue="$1"
  local auto_close="$2"

  local description
  local identifier
  local title
  local url

  description=$(echo "$linear_issue" | jq --raw-output ".description")
  identifier=$(echo "$linear_issue" | jq --raw-output ".identifier")
  title=$(echo "$linear_issue" | jq --raw-output ".title")
  url=$(echo "$linear_issue" | jq --raw-output ".url")

  cat << EOF
### Linear

:sparkles: **$title**
:globe_with_meridians: [$identifier]($url)

<details>
  <summary>Description</summary>

$(echo "$description" | indent "  ")
</details>

EOF

  # Add a magic comment to the PR description if the --closes flag is passed.
  if [ "$auto_close" = "true" ]; then
    echo "Closes $identifier"
  fi
}

function begin() {
  local linear_id=$1
  local auto_close=$2

  require_gh
  require_jq
  [ -n "$linear_id" ] && require_linear_api_key

  if ! git_status_clean ; then
    abort_error "git tree is dirty, cannot branch" "git status"
  fi

  ensure_branch_is_on_main

  local linear_title

  if [ -n "$linear_id" ]; then
    # Fetch the Linear issue
    local linear_issue
    linear_issue=$(get_linear_issue "$linear_id") && RC=$? || RC=$?

    if test $RC -ne 0; then
      abort_error "$linear_issue"
    fi

    linear_title=$(echo "$linear_issue" | jq --raw-output ".title")
  fi

  echo

  if [ -z "$linear_title" ]; then
    echo "Enter a title for your PR:"
  else
    dotsay "Enter a title for your PR, or press enter to default to @yellow[[$linear_title]]:"
  fi

  echo
  read -r -p "> " pr_title
  echo

  pr_title=$(trim "$pr_title")

  if [ "$pr_title" = "" ]; then
    if [ -z "$linear_title" ]; then
      abort_error "Empty PR title, aborting"
    else
      pr_title=$(trim "$linear_title")
    fi
  fi

  local branch_name
  local base_branch
  base_branch=$(git_main_branch)

  if [ "$linear_id" = "" ]; then
    branch_name="$USER/$(branch_name_from_title "$pr_title")"
  else
    branch_name="$USER/$linear_id/$(branch_name_from_title "$pr_title")"
  fi

  ensure_branch_does_not_exist_on_remote "$branch_name"
  ensure_branch_does_not_exist_locally "$branch_name"

  print_action "Fetching origin main"
  git fetch origin "$base_branch"
  echo

  print_action "Creating $branch_name"
  git checkout -b "$branch_name" "origin/$base_branch"
  echo

  print_action "Creating initial commit"
  git commit --allow-empty -m "[skip ci] Initial commit"
  echo

  print_action "Pushing branch to Github"
  git push -u origin "$branch_name"
  echo

  print_action "Creating PR"

  local temp_file=/tmp/work-cli-pr-description.md
  rm -f $temp_file

  local pr_template_file
  pr_template_file=".github/PULL_REQUEST_TEMPLATE.md"

  if [ -f "$pr_template_file" ]; then
    cp "$pr_template_file" "$temp_file"
  else
    touch "$temp_file"
  fi

  if [ -n "$linear_issue" ]; then
    echo >> $temp_file
    linear_description "$linear_issue" "$auto_close" >> $temp_file
  fi

  local pr_url
  pr_url=$(
    gh pr create \
      --assignee "@me" \
      --base "$base_branch" \
      --body-file "$temp_file" \
      --draft \
      --head "$branch_name" \
      --title "$pr_title"
  )

  print_done
  echo

  print_action "Opening PR in Chrome"
  open -a "Google Chrome" "$pr_url"
  print_done
}

function help_pr_show() {
  cat << EOF
Open the current pull request in Chrome.

If the pull request is ${BOLD}already${RESET} open in Chrome, it will focus the tab instead
of opening a new one.

${BOLD}USAGE${RESET}
  work pr show

${BOLD}FLAGS${RESET}
  none

${BOLD}INHERITED FLAGS${RESET}
  -h    Show help for this command

${BOLD}EXAMPLES${RESET}
  # Open the current branch's PR in Chrome
  work pr show

${BOLD}LEARN MORE${RESET}
  Use 'work <command> <subcommand> -h' for more information about a command.
EOF
}

function pr_show() {
  require_gh

  local url
  url=$(gh pr view --json url -q ".url" 2>/dev/null)
  local status=$?

  if test $status -eq 0; then
    focus_tab_or_open "$url"
  else
    dotsay "Error: Could not find a PR for the @yellow[[$(git_current_branch)]] branch"
  fi
}

function help_pr_switch() {
  cat << EOF
Switch to any of your open pull request's branches with a fast fuzzy finder.

${BOLD}USAGE${RESET}
  work pr switch

${BOLD}FLAGS${RESET}
  none

${BOLD}INHERITED FLAGS${RESET}
  -h    Show help for this command

${BOLD}EXAMPLES${RESET}
  # Show a fuzzy finder with all your open PRs
  # Switch by selecting the PR and pressing Enter
  work pr switch

${BOLD}LEARN MORE${RESET}
  Use 'work <command> <subcommand> -h' for more information about a command.
EOF
}

function pr_switch() {
  require_fzf
  require_jq
  require_gh

  local pull_requests
  pull_requests=$(gh pr list --author "@me" --json headRefName,number,title,url)

  if [ "$pull_requests" = "[]" ]; then
    echo "You have no open PRs in this repo."
    exit 0
  fi

  local as_table
  as_table=$(
    echo "$pull_requests" | \
      jq --raw-output '. | map("\(.number),\(.title),\(.headRefName)") | flatten[]' | \
      sort
  )

  local selected_pr
  selected_pr=$(
    echo -e "ID,Title,Branch name\n$as_table" | \
      column -t -s ',' | \
      fzf \
        --header "Select a PR to switch branches" \
        --layout reverse \
        --height=20 \
        --header-lines 1
  )

  if [ "$selected_pr" = "" ]; then
    # No PR selected, exit early
    exit 0
  fi

  local selected_branch
  local selected_num

  selected_num=$(echo "$selected_pr" | awk '{print $1}')
  selected_branch=$(
    echo "$pull_requests" | \
      jq --raw-output ".[] | select(.number == $selected_num) | .headRefName"
  )

  dotsay "Checking out branch @yellow[[$selected_branch]]"
  git checkout "$selected_branch"
}

function help_pr_edit() {
  cat << EOF
Edit your pull request in your \$EDITOR ($EDITOR).

This script will:

- Open ${YELLOW}$EDITOR${RESET}, allowing you to edit the PR description
- On save/exit from your editor, the PR description on Github will be updated

${BOLD}USAGE${RESET}
  work pr edit

${BOLD}FLAGS${RESET}
  none

${BOLD}INHERITED FLAGS${RESET}
  -h    Show help for this command

${BOLD}EXAMPLES${RESET}
  # Edit your PR description
  work pr edit

${BOLD}LEARN MORE${RESET}
  Use 'work <command> <subcommand> -h' for more information about a command.
EOF
}

function pr_edit() {
  edit_pr_in_editor description_body_file

  dotsay "Saved your PR description in @yellow[[$description_body_file]]"
  echo

  print_action "Updating the PR description..."
  gh pr edit -F "$description_body_file"
  echo

  # Cleanup as last step
  print_action "Cleaning up description file..."
  rm "$description_body_file"
}

function help_review() {
  cat << EOF
Request a pull request review.

This script will:

- Open ${YELLOW}$EDITOR${RESET}, allowing you to edit the PR description
- Request a review from a user

${BOLD}USAGE${RESET}
  work review [reviewer_username]

${BOLD}FLAGS${RESET}
  none

${BOLD}INHERITED FLAGS${RESET}
  -h    Show help for this command

${BOLD}EXAMPLES${RESET}
  # Request a review from @dbalatero
  work review dbalatero

${BOLD}LEARN MORE${RESET}
  Use 'work <command> <subcommand> -h' for more information about a command.
EOF
}

function review() {
  # Edit the PR
  local description_body_file
  edit_pr_in_editor description_body_file

  dotsay "Saved your PR description in @yellow[[$description_body_file]]"
  echo

  print_action "Pushing branch to Github..."
  git push -u --force-with-lease origin "$(git_current_branch)"
  echo

  # Update the PR
  print_action "Updating PR description..."
  gh pr edit -F "$description_body_file"
  echo

  print_action "Marking PR ready..."
  gh pr ready
  echo

  # Assign reviewer
  print_action "Assigning reviewer..."
  gh pr edit --add-reviewer "$reviewer"
  echo

  # Cleanup as last step
  print_action "Cleaning up description file..."
  rm "$description_body_file"
}

function help_setup() {
  cat << EOF
Does an initial one-time setup of all required ${YELLOW}work${RESET} dependencies.

This is not required to run, as ${YELLOW}work${RESET} will install dependencies on
demand when needed. However, the initial ${YELLOW}bin/install${RESET} script does
run it for you.

${BOLD}USAGE${RESET}
  work setup

${BOLD}FLAGS${RESET}
  none

${BOLD}INHERITED FLAGS${RESET}
  -h    Show help for this command

${BOLD}LEARN MORE${RESET}
  Use 'work <command> <subcommand> -h' for more information about a command.
EOF
}

function setup() {
  require_fzf
  require_jq
  require_gh

  echo
  echo "All dependencies are setup and ready!"
}

function print_help() {
  local command=$1

  if [[ "${script_args[*]}" =~ "-h" ]]; then
    help_"${command}"
    return 0
  else
    return 1
  fi
}

####################################################################
# Validate/parse options
####################################################################

function validate_and_extract_linear_id() {
  local linear_input="$1"

  # First see if it matches a https://linear.app url
  if echo "$linear_input" | grep -q '^https://linear.app/.\+/issue/[^/]\+' ; then
    echo "$linear_input" | sed -E 's/^.*\/issue\/([^/]+)\/.*/\1/g'
    return 0
  fi

  # Next see if it matches a straight up ID like "PROJ-123"
  if echo "$linear_input" | grep -q "^[^-]\+-\d\+$" ; then
    echo "$linear_input"
    return 0
  fi

  return 1
}

####################################################################
# Script start - arg parsing / command calling
####################################################################

auto_update_work_cli_if_needed

# Using while [[ $# -gt 0 ]] to parse opts
# https://stackoverflow.com/a/39398359
subcommand=$1

if [ "$subcommand" = "" ]; then
  help_work
  exit 0
else
  shift
fi

case "$subcommand" in
  begin)
    auto_close=true

    while [[ $# -gt 0 ]]; do
      case "$1" in
        -h)
          help_begin
          exit 0
          ;;
        --auto-close)
          auto_close=true
          ;;
        --no-auto-close)
          auto_close=false
          ;;
        -l|--linear)
          linear_id=$(validate_and_extract_linear_id "$2") || \
            abort_error "Could not parse -l flag (Linear ID). \"$2\" is not a valid value." help_begin
          shift
          ;;
        *)
          abort_error "Invalid option: $1" help_begin
          ;;
      esac

      # Shift after checking all the cases to get the next option
      shift
    done

    begin "$linear_id" "$auto_close"
    ;;
  pr)
    pr_command=$1

    if [ "$pr_command" = "" ]; then
      abort_error "work pr requires a subcommand" help_pr
    else
      shift
    fi

    case "$pr_command" in
      -h)
        help_pr
        exit 0
        ;;
      edit)
        print_help "pr_edit" || pr_edit
        ;;
      show)
        print_help "pr_show" || pr_show
        ;;
      switch)
        print_help "pr_switch" || pr_switch
        ;;
      *)
        abort_error "Unknown work pr subcommand: $pr_command" help_pr
        ;;
    esac
    ;;
  review)
    reviewer=$(echo "$1" | sed 's/@//g')

    if [ "$reviewer" = "" ]; then
      abort_error "No reviewer passed" help_review
    else
      shift
    fi

    print_help "review" || review "$reviewer"
    ;;
  setup)
    print_help "setup" || setup
    ;;
  -h)
    help_work
    exit 0
    ;;
  *)
    abort_error "Unknown subcommand: $subcommand" help_work
    ;;
esac
